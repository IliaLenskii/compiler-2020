-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {

  case expr of
    Const (x) -> x | Var (x) -> st (x) | Binop (o, l, r) -> evalOper (o, evalExpr (st, l), evalExpr (st, r) )
  esac
}

public fun evalOper (obj, left, right) {
    case obj of
        "+"  -> left + right
      | "-"  -> left - right
      | "*"  -> left * right
      | "/"  -> left / right
      | "%"  -> left % right
      | "==" -> left == right
      | "!=" -> left != right
      | "<"  -> left < right
      | ">"  -> left > right
      | "<=" -> left <= right
      | ">=" -> left >= right
      | "!!" -> left !! right
      | "&&" -> left && right
    esac
}
